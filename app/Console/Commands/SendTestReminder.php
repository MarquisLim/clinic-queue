<?php

namespace App\Console\Commands;

use App\Models\User;
use App\Models\Appointment;
use App\Events\AppointmentReminder;
use Illuminate\Console\Command;

class SendTestReminder extends Command
{
    protected $signature = 'test:reminder 
                            {user_id : ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}
                            {--appointment_id= : ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)}
                            {--message= : –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)}
                            {--force : –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å}';
    
    protected $description = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è';

    public function handle()
    {
        $userId = $this->argument('user_id');
        $appointmentId = $this->option('appointment_id');
        $customMessage = $this->option('message');
        $force = $this->option('force');
        
        // Find user
        $user = User::find($userId);
        if (!$user) {
            $this->error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {$userId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return 1;
        }

        $this->info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$user->name} (ID: {$user->id})");

        // Find appointment
        $appointment = null;
        
        if ($appointmentId) {
            // Specific appointment by ID
            $appointment = Appointment::find($appointmentId);
            if (!$appointment) {
                $this->error("‚ùå –ó–∞–ø–∏—Å—å —Å ID {$appointmentId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                return 1;
            }
            if ($appointment->patient_id != $userId) {
                $this->error("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
                return 1;
            }
        } else {
            // User's nearest appointment
            $appointment = Appointment::where('patient_id', $userId)
                ->where('slot_start', '>', now())
                ->orderBy('slot_start')
                ->first();
                
            if (!$appointment) {
                $this->error("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π");
                return 1;
            }
        }

        $this->info("üìÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞:");
        $this->line("   ID: {$appointment->id}");
        $this->line("   –í—Ä–∞—á: {$appointment->doctor->user->name}");
        $this->line("   –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {$appointment->doctor->specialty->name}");
        $this->line("   –í—Ä–µ–º—è: {$appointment->slot_start->format('Y-m-d H:i')}");
        $this->line("   –ë–∏–ª–µ—Ç: {$appointment->ticket_no}");
        $this->line("   –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " . ($appointment->reminder_sent ? '–î–∞' : '–ù–µ—Ç'));

        // Check if reminder was already sent
        if ($appointment->reminder_sent && !$force) {
            $this->warn("‚ö†Ô∏è  –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏");
            if (!$this->confirm("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ?")) {
                $this->info("–û—Ç–º–µ–Ω–µ–Ω–æ");
                return 0;
            }
        }

        // Form message
        $message = $customMessage ?: "üîî –¢–ï–°–¢–û–í–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –∫ –≤—Ä–∞—á—É {$appointment->doctor->user->name}";

        // Create notification
        $notification = $user->notifications()->create([
            'id' => \Illuminate\Support\Str::uuid(),
            'type' => 'appointment_reminder',
            'data' => [
                'appointment_id' => $appointment->id,
                'doctor_name' => $appointment->doctor->user->name,
                'specialty' => $appointment->doctor->specialty->name,
                'slot_start' => $appointment->slot_start->format('H:i'),
                'ticket_no' => $appointment->ticket_no,
                'message' => $message,
            ],
            'read_at' => null,
        ]);

        // Send real-time notification
        event(new AppointmentReminder($appointment, 'patient'));

        // Update reminder status (only if not forced)
        if (!$force) {
            $appointment->update(['reminder_sent' => true]);
        }

        $this->info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
        $this->line("   ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {$notification->id}");
        $this->line("   –°–æ–æ–±—â–µ–Ω–∏–µ: {$message}");
        $this->line("   –í—Ä–µ–º—è: " . now()->format('Y-m-d H:i:s'));
        $this->line("   Real-time —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WebSocket");

        return 0;
    }
}
